#!/bin/sh

GREEN="\33[32m"
RED="\33[31m"
RESET="\33[0m"

FIXTURES_PATH=$(dirname -- "$0")/fixtures

if [ -z "$FILES_HOST" ]; then
  FILES_HOST=localhost
fi

test_healthcheck_endpoint() {
  response=$(curl --verbose $FILES_HOST/check 2>&1)

  assert_contains "$response" "< HTTP/1.1 200 OK" && \
  assert_contains "$response" "Content-Type: application/json" && \
  assert_contains "$response" '{ "service": "files", "status": "healthy" }'
}

test_upload_endpoint_rejects_get_requests() {
  response=$(request GET)

  assert_contains "$response" "< HTTP/1.1 404 Not Found"
}

test_upload_endpoint_rejects_put_requests() {
  response=$(request PUT)

  assert_contains "$response" "< HTTP/1.1 404 Not Found"
}

test_upload_endpoint_rejects_delete_requests() {
  response=$(request DELETE)

  assert_contains "$response" "< HTTP/1.1 404 Not Found"
}

test_upload_endpoint_rejects_requests_without_content_type() {
  response=$(request POST "")

  assert_contains "$response" "< HTTP/1.1 415 Unsupported Media Type"
}

test_upload_endpoint_rejects_requests_with_unsupported_content_type() {
  response=$(request POST application/json)

  assert_contains "$response" "< HTTP/1.1 415 Unsupported Media Type"
}

test_uploads_image_png_files() {
  filepath=$FIXTURES_PATH/test_4x4.png

  response=$(request POST image/png --data-binary @"$filepath")

  assert_file_uploaded_equal $(get_file_url "$response") $filepath
}

test_resizes_image_png_files() {
  resized_filepath=$FIXTURES_PATH/test_2x2.png
  filepath=$FIXTURES_PATH/test_4x4.png

  response=$(request POST image/png --data-binary @"$filepath")

  assert_file_uploaded_equal "$(get_file_url "$response")?w=2" $resized_filepath
}

test_uploads_image_jpeg_files() {
  filepath=$FIXTURES_PATH/test_4x4.jpeg

  response=$(request POST image/jpeg --data-binary @"$filepath")

  assert_file_uploaded_equal $(get_file_url "$response") $filepath
}

test_resizes_image_jpeg_files() {
  resized_filepath=$FIXTURES_PATH/test_2x2.jpeg
  filepath=$FIXTURES_PATH/test_4x4.jpeg

  response=$(request POST image/jpeg --data-binary @"$filepath")

  assert_file_uploaded_equal "$(get_file_url "$response")?w=2" $resized_filepath
}

test_uploads_image_gif_files() {
  filepath=$FIXTURES_PATH/test_4x4.gif

  response=$(request POST image/gif --data-binary @"$filepath")

  assert_file_uploaded_equal $(get_file_url "$response") $filepath
}

test_resizes_image_gif_files() {
  resized_filepath=$FIXTURES_PATH/test_2x2.gif
  filepath=$FIXTURES_PATH/test_4x4.gif

  response=$(request POST image/gif --data-binary @"$filepath")

  assert_file_uploaded_equal "$(get_file_url "$response")?w=2" $resized_filepath
}

test_resizes_using_width_parameter() {
  resized_filepath=$FIXTURES_PATH/test_2x2.png
  filepath=$FIXTURES_PATH/test_4x4.png

  response=$(request POST image/png --data-binary @"$filepath")

  assert_file_uploaded_equal "$(get_file_url "$response")?w=2" $resized_filepath
}

test_resizes_using_height_parameter() {
  resized_filepath=$FIXTURES_PATH/test_2x2.png
  filepath=$FIXTURES_PATH/test_4x4.png

  response=$(request POST image/png --data-binary @"$filepath")

  assert_file_uploaded_equal "$(get_file_url "$response")?h=2" $resized_filepath
}

test_resizes_using_the_minimum_size() {
  resized_filepath=$FIXTURES_PATH/test_2x2.png
  filepath=$FIXTURES_PATH/test_4x4.png

  response=$(request POST image/png --data-binary @"$filepath")

  assert_file_uploaded_equal "$(get_file_url "$response")?w=3&h=2" $resized_filepath
}

test_resizing_does_not_stretch_the_image() {
  filepath=$FIXTURES_PATH/test_4x4.png

  response=$(request POST image/png --data-binary @"$filepath")

  assert_file_uploaded_equal "$(get_file_url "$response")?w=20" $filepath
}

test_uploads_text_plain_files() {
  filepath=$FIXTURES_PATH/test.txt

  response=$(request POST text/plain --data-binary @"$filepath")

  assert_file_uploaded_equal $(get_file_url "$response") $filepath
}

test_ignores_resizing_parameters_with_text_plain_files() {
  filepath=$FIXTURES_PATH/test.txt

  response=$(request POST text/plain --data-binary @"$filepath")

  assert_file_uploaded_equal "$(get_file_url "$response")?w=20" $filepath
}

request() {
  method=$1; shift
  content_type=$1; shift
  curl --verbose --request $method --header "Content-Type: $content_type" $@ $FILES_HOST 2>&1
}

get_file_url() {
  echo "$1" | grep "X-File-URL" | cut -d " " -f 3 | tr -d "\r"
}

assert_file_uploaded_equal() {
  file_url=$1
  file_url_with_params=${file_url%\?*}
  filename=${file_url_with_params##*/}

  curl -o /tmp/$filename $file_url 2>&1

  cmp /tmp/$filename $2
}

assert_contains() {
  echo "$1" | grep "$2"
}

run_tests() {
  SECONDS=0
  failures_count=0
  test_count=0
  tests=$(grep -E "^test_.*\(\)" $0 | grep -v grep | cut -d "(" -f 1)

  for test in $tests; do
    test_count=$((test_count+1))
    test_output=$(eval $test)

    if [ $? -eq 0 ]; then
      printf "${GREEN}.${RESET}"
    else
      failures_count=$((failures_count+1))
      printf "\n${RED}E\n\nTest $test failed\n\nOutput:\n\n${test_output}${RESET}\n"
    fi
  done

  echo
  echo
  echo "Finished in ${SECONDS}s"
  echo
  echo "$test_count tests, $failures_count failures"
  exit $failures_count
}

run_tests
