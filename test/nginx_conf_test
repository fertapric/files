#!/bin/sh

GREEN="\33[32m"
RED="\33[31m"
RESET="\33[0m"

FIXTURES_PATH=$(dirname -- "$0")/fixtures

if [ -z "$FILES_URL" ]; then
  FILES_URL=localhost
fi

test_healthcheck_endpoint() {
  response=$(curl -v $FILES_URL/check 2>&1)

  assert_contains "$response" "< HTTP/1.1 200 OK" && \
  assert_contains "$response" "Content-Type: application/json" && \
  assert_contains "$response" '{ "service": "files", "status": "healthy", "version": "1.3.0" }'
}

test_upload_endpoint_rejects_get_requests() {
  response=$(curl -v -X GET $FILES_URL 2>&1)

  assert_contains "$response" "< HTTP/1.1 404 Not Found"
}

test_upload_endpoint_rejects_put_requests() {
  response=$(curl -v -X PUT $FILES_URL 2>&1)

  assert_contains "$response" "< HTTP/1.1 404 Not Found"
}

test_upload_endpoint_rejects_delete_requests() {
  response=$(curl -v -X DELETE $FILES_URL 2>&1)

  assert_contains "$response" "< HTTP/1.1 404 Not Found"
}

test_upload_endpoint_rejects_requests_without_content_type() {
  response=$(curl -v -X POST $FILES_URL 2>&1)

  assert_contains "$response" "< HTTP/1.1 415 Unsupported Media Type"
}

test_upload_endpoint_rejects_requests_with_empty_content_type() {
  response=$(curl -v -X POST -H "Content-Type:" $FILES_URL 2>&1)

  assert_contains "$response" "< HTTP/1.1 415 Unsupported Media Type"
}

test_upload_endpoint_rejects_requests_with_unsupported_content_type() {
  response=$(curl -v -X POST -H "Content-Type: application/json" $FILES_URL 2>&1)

  assert_contains "$response" "< HTTP/1.1 415 Unsupported Media Type"
}

test_uploads_image_png_files() {
  file=$FIXTURES_PATH/test_4x4.png

  response=$(curl -v -X POST -H "Content-Type: image/png" --data-binary @"$file" $FILES_URL 2>&1)
  file_url=$(get_file_url "$response")

  assert_file_equal $(download_file_from_url $file_url) $file
}

test_resizes_image_png_files() {
  resized_file=$FIXTURES_PATH/test_2x2.png
  file=$FIXTURES_PATH/test_4x4.png

  response=$(curl -v -X POST -H "Content-Type: image/png" --data-binary @"$file" $FILES_URL 2>&1)
  file_url=$(get_file_url "$response")
  resized_file_url="${file_url}?w=2"

  assert_file_equal $(download_file_from_url $resized_file_url) $resized_file
}

test_uploads_image_jpeg_files() {
  file=$FIXTURES_PATH/test_4x4.jpeg

  response=$(curl -v -X POST -H "Content-Type: image/jpeg" --data-binary @"$file" $FILES_URL 2>&1)
  file_url=$(get_file_url "$response")

  assert_file_equal $(download_file_from_url $file_url) $file
}

test_resizes_image_jpeg_files() {
  resized_file=$FIXTURES_PATH/test_2x2.jpeg
  file=$FIXTURES_PATH/test_4x4.jpeg

  response=$(curl -v -X POST -H "Content-Type: image/jpeg" --data-binary @"$file" $FILES_URL 2>&1)
  file_url=$(get_file_url "$response")
  resized_file_url="${file_url}?w=2"

  assert_file_equal $(download_file_from_url $resized_file_url) $resized_file
}

test_uploads_image_gif_files() {
  file=$FIXTURES_PATH/test_4x4.gif

  response=$(curl -v -X POST -H "Content-Type: image/gif" --data-binary @"$file" $FILES_URL 2>&1)
  file_url=$(get_file_url "$response")

  assert_file_equal $(download_file_from_url $file_url) $file
}

test_resizes_image_gif_files() {
  resized_file=$FIXTURES_PATH/test_2x2.gif
  file=$FIXTURES_PATH/test_4x4.gif

  response=$(curl -v -X POST -H "Content-Type: image/gif" --data-binary @"$file" $FILES_URL 2>&1)
  file_url=$(get_file_url "$response")
  resized_file_url="${file_url}?w=2"

  assert_file_equal $(download_file_from_url $resized_file_url) $resized_file
}

test_resizes_using_width_parameter() {
  resized_file=$FIXTURES_PATH/test_2x2.png
  file=$FIXTURES_PATH/test_4x4.png

  response=$(curl -v -X POST -H "Content-Type: image/png" --data-binary @"$file" $FILES_URL 2>&1)
  file_url=$(get_file_url "$response")
  resized_file_url="${file_url}?w=2"

  assert_file_equal $(download_file_from_url $resized_file_url) $resized_file
}

test_resizes_using_height_parameter() {
  resized_file=$FIXTURES_PATH/test_2x2.png
  file=$FIXTURES_PATH/test_4x4.png

  response=$(curl -v -X POST -H "Content-Type: image/png" --data-binary @"$file" $FILES_URL 2>&1)
  file_url=$(get_file_url "$response")
  resized_file_url="${file_url}?h=2"

  assert_file_equal $(download_file_from_url $resized_file_url) $resized_file
}

test_resizes_using_the_minimum_size() {
  resized_file=$FIXTURES_PATH/test_2x2.png
  file=$FIXTURES_PATH/test_4x4.png

  response=$(curl -v -X POST -H "Content-Type: image/png" --data-binary @"$file" $FILES_URL 2>&1)
  file_url=$(get_file_url "$response")
  resized_file_url="${file_url}?w=3&h=2"

  assert_file_equal $(download_file_from_url $resized_file_url) $resized_file
}

test_resizing_does_not_stretch_the_image() {
  file=$FIXTURES_PATH/test_4x4.png

  response=$(curl -v -X POST -H "Content-Type: image/png" --data-binary @"$file" $FILES_URL 2>&1)
  file_url=$(get_file_url "$response")
  resized_file_url="${file_url}?w=20"

  assert_file_equal $(download_file_from_url $file_url) $file
}

test_uploads_text_plain_files() {
  file=$FIXTURES_PATH/test.txt

  response=$(curl -v -X POST -H "Content-Type: text/plain" --data-binary @"$file" $FILES_URL 2>&1)
  file_url=$(get_file_url "$response")

  assert_file_equal $(download_file_from_url $file_url) $file
}

test_ignores_resizing_parameters_with_text_plain_files() {
  file=$FIXTURES_PATH/test.txt

  response=$(curl -v -X POST -H "Content-Type: text/plain" --data-binary @"$file" $FILES_URL 2>&1)
  file_url=$(get_file_url "$response")
  resized_file_url="${file_url}?w=20"

  assert_file_equal $(download_file_from_url $resized_file_url) $file
}

# Parses the URL from the cURL response
#
# Example:
#
#    $ echo "$1"
#    > POST / HTTP/1.1
#    > Host: files.company.com
#    > User-Agent: curl/7.51.0
#    > Accept: */*
#    > Content-Type: text/plain
#    > Content-Length: 15
#    >
#    < HTTP/1.1 200 OK
#    < Server: nginx/1.11.8
#    < Date: Wed, 25 Jan 2017 21:30:00 GMT
#    < Content-Length: 0
#    < Connection: keep-alive
#    < X-File-URL: http://files.company.com/text/plain/6CEB99DE-E345-11E6-BBA6-C680ACE78BD7
#    < ETag: "ff22941336956098ae9a564289d1bf1b"
#    < Cache-Control: no-cache
#
#    $ grep "X-File-URL"
#    < X-File-URL: http://files.company.com/text/plain/6CEB99DE-E345-11E6-BBA6-C680ACE78BD7
#
#    $ cut -d " " -f 3
#    http://files.company.com/text/plain/6CEB99DE-E345-11E6-BBA6-C680ACE78BD7
#
get_file_url() {
  echo "$1" \
  | grep "X-File-URL" \
  | cut -d " " -f 3 \
  | tr -d "\r"
}

download_file_from_url() {
  tmp_file=$(mktemp /tmp/files.XXXXXX)
  curl -s $1 > $tmp_file
  echo $tmp_file
}

assert_file_equal() {
  cmp $1 $2
}

assert_contains() {
  echo "$1" | grep "$2"
}

run_tests() {
  SECONDS=0
  failures_count=0
  test_count=0
  tests=$(grep -E "^test_.*\(\)" $0 | grep -v grep | cut -d "(" -f 1)

  for test in $tests; do
    test_count=$((test_count+1))
    test_output=$(eval $test)

    if [ $? -eq 0 ]; then
      printf "${GREEN}.${RESET}"
    else
      failures_count=$((failures_count+1))

      printf $RED
      echo
      echo
      echo "Test $test failed"
      echo
      echo "Output:"
      echo
      echo $test_output
      echo
      printf $RESET
    fi
  done

  echo
  echo
  echo "Finished in ${SECONDS}s"
  echo
  echo "$test_count tests, $failures_count failures"
  exit $failures_count
}

run_tests
