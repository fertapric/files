load_module /etc/nginx/modules/ngx_http_image_filter_module.so;
load_module /etc/nginx/modules/ngx_http_perl_module.so;

env FILES_AWS_ACCESS_KEY_ID;
env FILES_AWS_REGION;
env FILES_AWS_S3_BUCKET;
env FILES_AWS_SECRET_ACCESS_KEY;
env FILES_URL_SCHEME;
env FILES_URL_HOST;
env FILES_URL_PORT;

user              nginx;

# Set number of worker processes automatically based on number of CPU cores.
worker_processes  auto;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
  worker_connections  1024;
}

http {
  include       /etc/nginx/mime.types;
  default_type  application/json;

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

  access_log  /var/log/nginx/access.log  main;

  # Don't tell nginx version to clients.
  server_tokens off;

  # Sendfile copies data between one FD and other from within the kernel,
  # which is more efficient than read() + write().
  sendfile on;

  # Disable caching
  add_header  Cache-Control no-cache;

  # Don't buffer data-sends (disable Nagle algorithm).
  # Good for sending frequent small bursts of data in real time.
  tcp_nodelay on;

  # Causes nginx to attempt to send its HTTP response head in one packet,
  # instead of using partial frames.
  tcp_nopush on;

  # Timeout for keep-alive connections. Server will close connections after
  # this time.
  keepalive_timeout  65;

  # Enable gzipping of responses.
  gzip  on;

  # Name servers used to resolve names of upstream servers into addresses.
  resolver          8.8.8.8 valid=300s;
  resolver_timeout  10s;

  # Specifies the maximum accepted body size of a client request, as
  # indicated by the request header Content-Length. If the stated content
  # length is greater than this size, then the client receives the HTTP
  # error code 413.
  client_max_body_size    2M;
  client_body_buffer_size 2M;
  image_filter_buffer     2M;

  perl_set $aws_s3_bucket 'sub {
    return $ENV{"FILES_AWS_S3_BUCKET"};
  }';

  perl_set $aws_s3_key 'sub {
    use Data::UUID;

    return (shift)->variable("content_type") . "/" . Data::UUID->new->create_str();
  }';

  perl_set $x_amz_date 'sub {
    use POSIX qw(strftime);

    return strftime "%Y%m%dT%H%M%SZ", gmtime;
  }';

  perl_set $x_amz_content_sha256 'sub {
    use Digest::SHA qw(sha256_hex);

    return sha256_hex((shift)->request_body);
  }';

  perl_set $aws_authorization_header 'sub {
    use Digest::SHA qw(hmac_sha256 hmac_sha256_hex);
    use POSIX qw(strftime);

    my $r = shift;

    my $aws_access_key_id = $ENV{"FILES_AWS_ACCESS_KEY_ID"};
    my $aws_secret_access_key = $ENV{"FILES_AWS_SECRET_ACCESS_KEY"};
    my $aws_region = $ENV{"FILES_AWS_REGION"};
    my $aws_s3_bucket = $ENV{"FILES_AWS_S3_BUCKET"};
    my $aws_s3_key = $r->variable("aws_s3_key");

    my $url_scheme = $ENV{"FILES_URL_SCHEME"} or $r->variable("scheme");
    my $url_host = $ENV{"FILES_URL_HOST"} or $r->variable("host");
    my $url_port = $ENV{"FILES_URL_PORT"} || 80;
    my $url = $url_scheme . "://" . $url_host . ($url_port == 80 ? "" : ":" . $url_port);

    $r->header_out("X-File-URL", $url . "/$aws_s3_key");

    my $x_amz_date = $r->variable("x_amz_date");
    my $x_amz_acl = "public-read";
    my $x_amz_content_sha256 = $r->variable("x_amz_content_sha256");

    # AWS Signature Version 4
    # http://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-header-based-auth.html

    # Canonical Request
    my $http_verb = "PUT";
    my $content_type = $r->variable("content_type");
    my $canonical_uri = "/$aws_s3_key";
    my $canonical_query_string = "";
    my $canonical_headers = "content-type:$content_type\n" .
                            "host:$aws_s3_bucket.s3.amazonaws.com\n" .
                            "x-amz-acl:$x_amz_acl\n" .
                            "x-amz-content-sha256:$x_amz_content_sha256\n" .
                            "x-amz-date:$x_amz_date\n";
    my $signed_headers = "content-type;host;x-amz-acl;x-amz-content-sha256;x-amz-date";
    my $hashed_payload = $x_amz_content_sha256;
    my $canonical_request = "$http_verb\n" .
                            "$canonical_uri\n" .
                            "$canonical_query_string\n" .
                            "$canonical_headers\n" .
                            "$signed_headers\n" .
                            "$hashed_payload";

    # String to sign
    my $datestamp = strftime "%Y%m%d", gmtime;
    my $credential_scope = "$datestamp/$aws_region/s3/aws4_request";
    my $canonical_request_sha256 = sha256_hex($canonical_request);
    my $string_to_sign = "AWS4-HMAC-SHA256\n" .
                         "$x_amz_date\n" .
                         "$credential_scope\n" .
                         "$canonical_request_sha256";

    # Signature
    my $date_key = hmac_sha256($datestamp, "AWS4" . $aws_secret_access_key);
    my $date_region_key = hmac_sha256($aws_region, $date_key);
    my $date_region_service_key = hmac_sha256("s3", $date_region_key);
    my $sign_in_key = hmac_sha256("aws4_request", $date_region_service_key);
    my $signature = hmac_sha256_hex($string_to_sign, $sign_in_key);

    # Credential
    my $credential = "$aws_access_key_id/$credential_scope";

    return "AWS4-HMAC-SHA256 " .
           "Credential=$credential," .
           "SignedHeaders=$signed_headers," .
           "Signature=$signature";
  }';

  server {
    listen 80 default_server;

    location /check {
      return 200 '{ "service": "files", "status": "healthy" }';
    }

    location / {
      if ($request_method != POST) {
        return 404;
      }

      if ($content_type !~ (image.jpeg|image.png|image.gif|text.plain)) {
        return 415;
      }

      proxy_method PUT;
      proxy_set_header Authorization $aws_authorization_header;
      proxy_set_header x-amz-acl public-read;
      proxy_set_header x-amz-content-sha256 $x_amz_content_sha256;
      proxy_set_header x-amz-date $x_amz_date;
      proxy_hide_header x-amz-id-2;
      proxy_hide_header x-amz-request-id;
      proxy_pass "http://$aws_s3_bucket.s3.amazonaws.com/$aws_s3_key";
    }

    location ~* ^/(image.jpeg.+|image.png.+|image.gif.+) {
      set $aws_s3_key "$1";

      proxy_hide_header x-amz-id-2;
      proxy_hide_header x-amz-request-id;
      proxy_pass "http://$aws_s3_bucket.s3.amazonaws.com/$aws_s3_key";

      set $image_width -;
      set $image_height -;
      if ($args ~* "w=(\d+)") { set $image_width $1;  }
      if ($args ~* "h=(\d+)") { set $image_height $1; }

      image_filter_jpeg_quality 100;
      image_filter              resize $image_width $image_height;
    }

    location ~* ^/(text.plain.+) {
      proxy_pass "https://$aws_s3_bucket.s3.amazonaws.com/$1";
    }
  }
}
